use Data::Dumper;
use Geo::Lookup qw(geo_lookup);
use Regions qw(%code_country %country_continent %country_code);
use Sys::Hostname;

$VERSION = '1.05';
my $boot_time = time;

BEGIN {

     $sockaddr_t = 'S n a4 x8';

     $WEIGHT_PER_USER = 50; # should be consistent with poller
     $need_maint = 0;
     $poller_sleep = 300;
     $poller_config = "dinamed.config";
     $hostmaster = "ask.develooper.com";

}

LBDB::add_static("ddns.develooper.com",T_SOA,
         rr_SOA(hostname,$hostmaster,time, 86400, 86400, 86400, 0)
);

LBDB::add_dynamic("geo.ddns.develooper.com"=> \&handle_geo_request);
LBDB::add_dynamic("mgmt.ddns.develooper.com"  => \&handle_manage_request);

my $cpan_queries = 0;

############################################################
# dynamic domain handlers...

sub authorized_ip {
  my $ip = shift;
  #warn "checking if [$ip] is authorized";
  return 1;  # just allow everyone ...
  return 1 if $ip eq "64.81.84.165";
  return 1 if $ip eq "64.81.84.162";
  return 1 if $ip eq "216.246.96.121";
  return 1 if $ip eq "216.246.96.102";
  return 1 if $ip eq "130.228.230.9";
  return 1 if $ip eq "142.132.6.106";   # theoryx5
  return 1 if $ip eq "142.132.1.82";    # another theoryx box
  return 0;
} 

sub handle_geo_request {
   my($domain,$residual,$qtype,$qclass,$dm,$host_asking) = @_;

   $cpan_queries++;

   my $qname = $residual;

   my $geo = "";  # put in here so we can log it below

   if (authorized_ip($host_asking)
       and $qtype == T_ANY || $qtype == T_TXT) {

     my $ttl = 300;
     my @answers;
     
     $geo = geo_lookup($qname) || "-";
     
     push @answers, dns_answer(QPTR, T_TXT, C_IN, $ttl, rr_TXT("$geo"))
       if ($qtype == T_TXT or $qtype == T_ANY);

     $dm->{'answer'}  .= join "", @answers;
     $dm->{'ancount'} += @answers;
   } else {
     $dm->{'rcode'} = NXDOMAIN;
   }

   write_log("domain: $domain / res: $residual / qt: $qtype, qc: $qclass / host_asking: $host_asking / resp: $geo");

   return 1;
}

sub handle_manage_request {
   my($domain,$residual,$qtype,$qclass,$dm,$host_asking) = @_;

   write_log("domain: $domain / res: $residual / qt: $qtype, qc: $qclass / host_asking: $host_asking");

   my $qname = $residual;

   if ($qtype == T_ANY || $qtype == T_TXT || $qtype == T_MX) {
     
     my $ttl = 0;
     my @answers;

     if ($residual =~ m/^(\d+\.\d+\.\d+\.\d+)\.reload$/) {
       my $ip_to_lookup = $1;
       my $result = lookup($ip_to_lookup, 1);
       push @answers, dns_answer(QPTR, T_TXT, C_IN, 0, rr_TXT("$ip_to_lookup is " . $result ? $result : "NA" ));
     } else {
       push @answers, dns_answer(QPTR, T_TXT, C_IN, $ttl, rr_TXT("dinamed/$VERSION"));
       push @answers, dns_answer(QPTR, T_TXT, C_IN, $ttl, rr_TXT("Host: ".hostname));
       push @answers, dns_answer(QPTR, T_TXT, C_IN, $ttl, rr_TXT("Started: ". scalar localtime($boot_time)));
       push @answers, dns_answer(QPTR, T_TXT, C_IN, $ttl, rr_TXT("Now:     ". scalar localtime));
       push @answers, dns_answer(QPTR, T_TXT, C_IN, $ttl, rr_TXT("Questions: $cpan_queries"));
     }

     if ($subdomain eq "cpan" and ($qtype == T_MX or $qtype == T_ANY)) {
       push @answers, dns_answer(QPTR, T_MX, C_IN, 3600*144, rr_MX(10,"miette.develooper.com"));
       push @answers, dns_answer(QPTR, T_MX, C_IN, 3600*144, rr_MX(11,"relaybackup.netcetera.dk"));
     }

     $dm->{'answer'}  .= join "", @answers;
     $dm->{'ancount'} += @answers;
   } else {
     $dm->{'rcode'} = NXDOMAIN;
   }
   return 1;
}


############################################################
# standard hooks

sub catch_hup { 
    $need_maint=1; 
    $need_reload=1; 
}

sub do_maint {
    &write_log("do_maint") if $debug;
    if ($need_reload) {
        &write_log("reloading config") if $debug;
	$need_reload=0;
    }
    $need_maint=0;
}

sub clean_exit {
    &write_log("received signal, exiting...") ;
    &close_log;
    unlink "$0.$opt_p.pid";
    exit(0);
}

sub init_signals {
    $::SIG{'INT'} = 'clean_exit';
    $::SIG{'QUIT'} = 'clean_exit';
    $::SIG{'TERM'} = 'clean_exit';
    $::SIG{'HUP'} = 'catch_hup';
}

&init_signals;

1;


